#
# Makefile のターゲット依存部（RaspberryPi Pico用）
#

#
# ボード名, チップ名，コア名，開発環境名の定義
#
BOARD = raspberrypi_pico
CHIP  = rp2040
PRC   = arm_m
TOOL  = gcc

#
# 使用するタイマ
#
#KERNEL_TIMER = SYSTICK
KERNEL_TIMER = TIM

#
# コンパイルオプション
#
INCLUDES := $(INCLUDES) -I$(TARGETDIR)
CDEFS := $(CDEFS)
COPTS := $(COPTS) 
LDFLAGS := -nostdlib -nostartfiles $(LDFLAGS) -Wl,--print-memory-usage

#
# ファイルサイズ削減のためのオプション
#
COPTS   := $(COPTS) -ffunction-sections -fdata-sections
OBJ_LDFLAGS := $(OBJ_LDFLAGS) -Wl,--gc-sections

#
# カーネルに関する定義
#
KERNEL_DIRS := $(KERNEL_DIRS) $(TARGETDIR)
KERNEL_ASMOBJS := $(KERNEL_ASMOBJS) start.o bs2_default_padded_checksummed.o
KERNEL_COBJS := $(KERNEL_COBJS) target_kernel_impl.o

#
# システムサービスに関する定義
#
SYSSVC_DIRS := $(SYSSVC_DIRS)
SYSSVC_COBJS := $(SYSSVC_COBJS)

#
# 使用するタイマ
#
ifeq ($(KERNEL_TIMER), SYSTICK)
CDEFS := $(CDEFS) -DUSE_SYSTICK_AS_TIMETICK
KERNEL_COBJS := $(KERNEL_COBJS) core_timer.o
else
ifeq ($(KERNEL_TIMER), TIM)
CDEFS := $(CDEFS) -DUSE_TIM_AS_HRT
KERNEL_COBJS := $(KERNEL_COBJS) target_timer.o
endif
endif

#
# GNU開発環境のターゲットアーキテクチャの定義
#
GCC_TARGET = arm-none-eabi

#
# トレースログ記録のサンプルコードに関する定義
#
ifdef ENABLE_TRACE
	COPTS := $(COPTS) -DTOPPERS_ENABLE_TRACE
	SYSSVC_DIRS := $(SYSSVC_DIRS) $(SRCDIR)/arch/tracelog
endif

#
# 依存関係の定義
#
cfg1_out.timestamp: $(TARGETDIR)/target_timer.cfg
offset.timestamp: 
kernel_cfg.timestamp: $(TARGETDIR)/target_kernel.trb
check.timestamp: $(TARGETDIR)/target_check.trb

#
# リンカスクリプトの定義
#
LDSCRIPT = $(TARGETDIR)/rpi_pico.ld

#
# チップ依存部のインクルード
#
include $(SRCDIR)/arch/$(PRC)_$(TOOL)/$(CHIP)/Makefile.chip

#
# フラッシュへの書き込み
#
run: $(OBJFILE)
	openocd -f interface/picoprobe.cfg -f "target/rp2040.cfg" -c "program $(OBJFILE) verify" -c "resume" -c "shutdown "
