/*
 *		サンプルプログラム(1)のシステムコンフィギュレーションファイル
 *
 *  $Id: sample1.cfg 282 2021-06-03 06:35:25Z ertl-honda $
 */
INCLUDE("syssvc/syslog.cfg");
INCLUDE("syssvc/banner.cfg");
INCLUDE("syssvc/serial.cfg");
INCLUDE("syssvc/logtask.cfg");

#include "sample1.h"

ATT_INI({ TA_NULL, 0, global_inirtn });
ATT_TER({ TA_NULL, 0, global_terrtn });

CLASS(CLS_ALL_PRC1){
	CRE_TSK(TASK1_1, { TA_NULL, 0x10000|1, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK1_2, { TA_NULL, 0x10000|2, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK1_3, { TA_NULL, 0x10000|3, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(MAIN_TASK1, { TA_ACT, 1, main_task, MAIN_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(EXC_TASK1, { TA_NULL, 1, exc_task, EXC_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(SERVER_TASK1, { TA_ACT, 1, server_task, SERVER_PRIORITY, STACK_SIZE, NULL });
#if (TOPPERS_TEPP_PRC & 0x01) != 0
	CRE_CYC(CYCHDR1_1, { TA_NULL, { TNFY_HANDLER, PRC1, cyclic_handler }, 2000000, 0 });
	CRE_ALM(ALMHDR1_1, { TA_NULL, { TNFY_HANDLER, PRC1, alarm_handler }});
#endif /* (TOPPERS_TEPP_PRC & 0x01) != 0 */
	CRE_DTQ(SERVER_DTQ1, { TA_TPRI, NUM_SERVER_DTQ, NULL });
	ATT_INI({ TA_NULL, 1, local_inirtn });
	ATT_TER({ TA_NULL, 1, local_terrtn });
}

CLASS(CLS_PRC1){
#ifdef INTNO1
	CFG_INT(INTNO1, { INTNO1_INTATR, INTNO1_INTPRI });
	CRE_ISR(INTNO1_ISR, { TA_NULL, 0, INTNO1, intno1_isr, 1 });
#endif /* INTNO1 */
#ifdef CPUEXC1_PRC1
	DEF_EXC(CPUEXC1_PRC1, { TA_NULL, cpuexc_handler });
#endif /* CPUEXC1_PRC1 */
}

CLASS(CLS_ALL_PRC1){
	CRE_SPN(SPN1, {TA_NULL});
}

#if TNUM_PRCID >= 2

CLASS(CLS_ALL_PRC2){
	CRE_TSK(TASK2_1, { TA_NULL, 0x20000|1, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK2_2, { TA_NULL, 0x20000|2, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK2_3, { TA_NULL, 0x20000|3, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(EXC_TASK2, { TA_NULL, 2, exc_task, EXC_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(SERVER_TASK2, { TA_ACT, 2, server_task, SERVER_PRIORITY, STACK_SIZE, NULL });
#if (TOPPERS_TEPP_PRC & 0x02) != 0
	CRE_CYC(CYCHDR2_1, { TA_NULL, { TNFY_HANDLER, PRC2, cyclic_handler }, 2000000, 0 });
	CRE_ALM(ALMHDR2_1, { TA_NULL, { TNFY_HANDLER, PRC2, alarm_handler }});
#endif /* (TOPPERS_TEPP_PRC & 0x02) != 0 */
	CRE_DTQ(SERVER_DTQ2, { TA_TPRI, NUM_SERVER_DTQ, NULL });
	ATT_INI({ TA_NULL, 2, local_inirtn });
	ATT_TER({ TA_NULL, 2, local_terrtn });
}

CLASS(CLS_PRC2){
#ifdef INTNO2
	CFG_INT(INTNO2, { INTNO2_INTATR, INTNO2_INTPRI });
	CRE_ISR(INTNO2_ISR, { TA_NULL, 0, INTNO2, intno2_isr, 1 });
#endif /* INTNO2 */
#ifdef CPUEXC1_PRC2
	DEF_EXC(CPUEXC1_PRC2, { TA_NULL, cpuexc_handler });
#endif /* CPUEXC1_PRC2 */
}

#endif /* TNUM_PRCID >= 2 */

#if TNUM_PRCID >= 3

CLASS(CLS_ALL_PRC3){
	CRE_TSK(TASK3_1, { TA_NULL, 0x30000|1, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK3_2, { TA_NULL, 0x30000|2, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK3_3, { TA_NULL, 0x30000|3, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(EXC_TASK3, { TA_NULL, 3, exc_task, EXC_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(SERVER_TASK3, { TA_ACT, 3, server_task, SERVER_PRIORITY, STACK_SIZE, NULL });
#if (TOPPERS_TEPP_PRC & 0x04) != 0
	CRE_CYC(CYCHDR3_1, { TA_NULL, { TNFY_HANDLER, PRC3, cyclic_handler }, 2000000, 0 });
	CRE_ALM(ALMHDR3_1, { TA_NULL, { TNFY_HANDLER, PRC3, alarm_handler }});
#endif /* (TOPPERS_TEPP_PRC & 0x04) != 0 */
	CRE_DTQ(SERVER_DTQ3, { TA_TPRI, NUM_SERVER_DTQ, NULL });
	ATT_INI({ TA_NULL, 3, local_inirtn });
	ATT_TER({ TA_NULL, 3, local_terrtn });
}

CLASS(CLS_PRC3){
#ifdef INTNO3
	CFG_INT(INTNO3, { INTNO3_INTATR, INTNO3_INTPRI });
	CRE_ISR(INTNO3_ISR, { TA_NULL, 0, INTNO3, intno3_isr, 1 });
#endif /* INTNO3 */
#ifdef CPUEXC1_PRC3
	DEF_EXC(CPUEXC1_PRC3, { TA_NULL, cpuexc_handler });
#endif /* CPUEXC1_PRC3 */
}
#endif /* TNUM_PRCID >= 3 */

#if TNUM_PRCID >= 4

CLASS(CLS_ALL_PRC4){
	CRE_TSK(TASK4_1, { TA_NULL, 0x40000|1, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK4_2, { TA_NULL, 0x40000|2, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK4_3, { TA_NULL, 0x40000|3, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(EXC_TASK4, { TA_NULL, 4, exc_task, EXC_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(SERVER_TASK4, { TA_ACT, 4, server_task, SERVER_PRIORITY, STACK_SIZE, NULL });
#if (TOPPERS_TEPP_PRC & 0x08) != 0
	CRE_CYC(CYCHDR4_1, { TA_NULL, { TNFY_HANDLER, PRC4, cyclic_handler }, 2000000, 0 });
	CRE_ALM(ALMHDR4_1, { TA_NULL, { TNFY_HANDLER, PRC4, alarm_handler }});
#endif /* (TOPPERS_TEPP_PRC & 0x08) != 0 */
	CRE_DTQ(SERVER_DTQ4, { TA_TPRI, NUM_SERVER_DTQ, NULL });
	ATT_INI({ TA_NULL, 4, local_inirtn });
	ATT_TER({ TA_NULL, 4, local_terrtn });
}

CLASS(CLS_PRC4){
#ifdef INTNO4
	CFG_INT(INTNO4, { INTNO4_INTATR, INTNO4_INTPRI });
	CRE_ISR(INTNO4_ISR, { TA_NULL, 0, INTNO4, intno4_isr, 1 });
#endif /* INTNO4 */
#ifdef CPUEXC1_PRC4
	DEF_EXC(CPUEXC1_PRC4, { TA_NULL, cpuexc_handler });
#endif /* CPUEXC1_PRC4 */
}

#endif /* TNUM_PRCID >= 4 */
