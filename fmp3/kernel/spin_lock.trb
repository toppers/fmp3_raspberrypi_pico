# -*- coding: utf-8 -*-
#
#   TOPPERS/FMP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Flexible MultiProcessor Kernel
# 
#   Copyright (C) 2015 by FUJI SOFT INCORPORATED, JAPAN
#   Copyright (C) 2015-2019 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: spin_lock.trb 145 2019-03-10 15:27:01Z ertl-honda $
# 

#
#		スピンロック機能の生成スクリプト
#

class SpinLockObject < KernelObject
  def initialize()
    super("spn", "spin_lock")
    @omit_cb = true
  end

  def prepare(key, params)
    # spnatrが無効の場合（E_RSATR）［NGKI2132］［NGKI5168］［NGKI5175］
    #（TA_NATIVE，TARGET_SPNATR以外のビットがセットされている場合）
    if (params[:spnatr] & ~($TA_NATIVE|$TARGET_SPNATR)) != 0
      error_illegal_id("E_RSATR", params, :spnatr, :spnid)
    end
  end

  def generateData()
    # スピンロックの実現方式の決定
    num_native_spn = 0
    $cfgData[:CRE_SPN].sort.each do |_, params|
      # TA_NATIVE属性のスピンロックの処理
      if (params[:spnatr] & $TA_NATIVE) != 0
        num_native_spn += 1

        # ハードウェアが持つ機構が不足する場合（E_NORES）［NGKI5174］
        if defined?($TMAX_NATIVE_SPN) && num_native_spn > $TMAX_NATIVE_SPN
          error_ercd("E_NORES", params, "the number of spinlocks " \
								"with TA_NATIVE attribute exceeds " \
								"the maximum number supported on this target")
        end
        params[:ispnatr] = params[:spnatr]
        params[:native] = num_native_spn
      end
    end
    $cfgData[:CRE_SPN].sort.each do |_, params|
      # TA_NATIVE属性でないスピンロックの処理
      if (params[:spnatr] & $TA_NATIVE) == 0
        if !defined?($TMAX_NATIVE_SPN) || num_native_spn < $TMAX_NATIVE_SPN
          num_native_spn += 1
          params[:ispnatr] = NumStr.new($TA_NATIVE | params[:spnatr])
          params[:native] = num_native_spn
        else
          params[:ispnatr] = params[:spnatr]
        end
      end
    end

    # スピンロックに必要なデータ構造の生成
    $cfgData[:CRE_SPN].sort.each do |_, params|
      if (params[:ispnatr] & $TA_NATIVE) != 0
        params[:lock] = GenerateNativeSpn(params)
      else
        $kernelCfgC.add("volatile bool_t _kernel_lockflag_#{params[:spnid]};")
        params[:lock] = "((intptr_t) &_kernel_lockflag_#{params[:spnid]})"
      end
    end
    $kernelCfgC.add
  end

  def generateInib(key, params)
    return("(#{params[:ispnatr]}), #{params[:lock]}")
  end
end

#
#  スピンロックに関する情報の生成
#
$kernelCfgC.comment_header("SpinLock Functions")
SpinLockObject.new.generate()
